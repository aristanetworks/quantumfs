Coding Style
############

The coding style used in QuantumFS with C++ is generally defined using the Google C++
Style Guide[0] with the following modifications in order to be more similar to the
golang code:

1. Standard indentation is done using a single hard tab represented as eight spaces,
   not two spaces.

   Alignment of line continuations or wrapped arguments should be done using tabs up
   to the normal indentation of the line and then spaces to align the text. This is
   also known as Smart Tabs[1][2].

   Wrapping of long argument lists should be indented one additional level. If ever
   the following line of code is at the same indentation level, perhaps because the
   wrapped line was a function argument list, then add a blank line. For example:

ReturnType LongClassName::ReallyReallyReallyLongFunctionName(
	Type par_name1,
	Type par_name2,
	Type par_name3) {

	DoSomething();
	...
}

   If it is reasonable, you should align the arguments or variables using tabs to
   match the indentation and spaces to align. For example:

ReturnType ClassName::ReallyLongFunctionName(Type par_name1, Type par_name2,
                                             Type par_name3) {
|----------- Spaces for alignment ----------|
	DoSomething(par_name1, par_name2, par_name3, par_name4,
	            really_long_name_which_would_not_fit_above);
^	|- Spaces -|
+--- Tab
	...
}

   Case statements inside switch statements are not indented relative to the switch
   statement itself. For example:

switch (var) {
case 0: {
	...
	break;
case 1:
	...
	break;
default:
	assert(false);
}

   The class protection statements (public:, protected: and private:) are aligned one
   space beyond the class declaration. Member declarations are indented.

class MyClass : public OtherClass {
 public:      // Note the 1 space indent!
	MyClass();  // Regular indent.
	explicit MyClass(int var);
	~MyClass() {}

	void SomeFunction();
	void SomeFunctionThatDoesNothing() {
	}

	void set_some_var(int var) { some_var_ = var; }
	int some_var() const { return some_var_; }

 private:
	bool SomeInternalFunction();

	int some_var_;
	int some_other_var_;
};

2. The maximum recommended line length is 85 characters, not 80.
3. Braces are mandatory for all loops and 'if' statements.
4. Private members should not be named with a trailing underscore ("_"), as this
   conflicts with the QuantumFS golang convention that such functions have locking
   constraints.
5. All access to members of the current class must be via "this->".


[0] https://google.github.io/styleguide/cppguide.html
[1] https://www.emacswiki.org/emacs/SmartTabs
[2] https://github.com/dpc/vim-smarttabs
