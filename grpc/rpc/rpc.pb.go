// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	WorkspaceNonce
	RequestId
	Response
	ObjectKey
	WorkspaceName
	Void
	NumTypespacesResponse
	TypespaceTableResponse
	NamespaceRequest
	NumNamespacesResponse
	NamespaceTableResponse
	WorkspaceRequest
	NumWorkspacesResponse
	WorkspaceTableResponse
	WorkspaceUpdate
	BranchWorkspaceRequest
	AdvanceWorkspaceRequest
	AdvanceWorkspaceResponse
	FetchWorkspaceResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResponseCodes int32

const (
	ResponseCodes_SUCCESS             ResponseCodes = 0
	ResponseCodes_WORKSPACE_NOT_FOUND ResponseCodes = 1
	ResponseCodes_WORKSPACE_EXISTS    ResponseCodes = 2
	ResponseCodes_FATAL_DB_ERROR      ResponseCodes = 3
	ResponseCodes_LOCKED              ResponseCodes = 4
	ResponseCodes_OUT_OF_DATE         ResponseCodes = 5
)

var ResponseCodes_name = map[int32]string{
	0: "SUCCESS",
	1: "WORKSPACE_NOT_FOUND",
	2: "WORKSPACE_EXISTS",
	3: "FATAL_DB_ERROR",
	4: "LOCKED",
	5: "OUT_OF_DATE",
}
var ResponseCodes_value = map[string]int32{
	"SUCCESS":             0,
	"WORKSPACE_NOT_FOUND": 1,
	"WORKSPACE_EXISTS":    2,
	"FATAL_DB_ERROR":      3,
	"LOCKED":              4,
	"OUT_OF_DATE":         5,
}

func (x ResponseCodes) String() string {
	return proto.EnumName(ResponseCodes_name, int32(x))
}
func (ResponseCodes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WorkspaceNonce struct {
	Nonce uint64 `protobuf:"fixed64,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *WorkspaceNonce) Reset()                    { *m = WorkspaceNonce{} }
func (m *WorkspaceNonce) String() string            { return proto.CompactTextString(m) }
func (*WorkspaceNonce) ProtoMessage()               {}
func (*WorkspaceNonce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WorkspaceNonce) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type RequestId struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestId) Reset()                    { *m = RequestId{} }
func (m *RequestId) String() string            { return proto.CompactTextString(m) }
func (*RequestId) ProtoMessage()               {}
func (*RequestId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RequestId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Response struct {
	RequestId *RequestId    `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	Err       ResponseCodes `protobuf:"varint,2,opt,name=err,enum=ResponseCodes" json:"err,omitempty"`
	ErrCause  string        `protobuf:"bytes,3,opt,name=errCause" json:"errCause,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetRequestId() *RequestId {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *Response) GetErr() ResponseCodes {
	if m != nil {
		return m.Err
	}
	return ResponseCodes_SUCCESS
}

func (m *Response) GetErrCause() string {
	if m != nil {
		return m.ErrCause
	}
	return ""
}

type ObjectKey struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ObjectKey) Reset()                    { *m = ObjectKey{} }
func (m *ObjectKey) String() string            { return proto.CompactTextString(m) }
func (*ObjectKey) ProtoMessage()               {}
func (*ObjectKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ObjectKey) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WorkspaceName struct {
	RequestId *RequestId `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *WorkspaceName) Reset()                    { *m = WorkspaceName{} }
func (m *WorkspaceName) String() string            { return proto.CompactTextString(m) }
func (*WorkspaceName) ProtoMessage()               {}
func (*WorkspaceName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WorkspaceName) GetRequestId() *RequestId {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *WorkspaceName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Void struct {
	Dummy bool `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Void) GetDummy() bool {
	if m != nil {
		return m.Dummy
	}
	return false
}

// Query Typespaces
type NumTypespacesResponse struct {
	Header        *Response `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NumTypespaces int64     `protobuf:"varint,2,opt,name=numTypespaces" json:"numTypespaces,omitempty"`
}

func (m *NumTypespacesResponse) Reset()                    { *m = NumTypespacesResponse{} }
func (m *NumTypespacesResponse) String() string            { return proto.CompactTextString(m) }
func (*NumTypespacesResponse) ProtoMessage()               {}
func (*NumTypespacesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NumTypespacesResponse) GetHeader() *Response {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NumTypespacesResponse) GetNumTypespaces() int64 {
	if m != nil {
		return m.NumTypespaces
	}
	return 0
}

type TypespaceTableResponse struct {
	Header     *Response `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Typespaces []string  `protobuf:"bytes,2,rep,name=typespaces" json:"typespaces,omitempty"`
}

func (m *TypespaceTableResponse) Reset()                    { *m = TypespaceTableResponse{} }
func (m *TypespaceTableResponse) String() string            { return proto.CompactTextString(m) }
func (*TypespaceTableResponse) ProtoMessage()               {}
func (*TypespaceTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TypespaceTableResponse) GetHeader() *Response {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TypespaceTableResponse) GetTypespaces() []string {
	if m != nil {
		return m.Typespaces
	}
	return nil
}

// Query Namespaces
type NamespaceRequest struct {
	RequestId *RequestId `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	Typespace string     `protobuf:"bytes,2,opt,name=typespace" json:"typespace,omitempty"`
}

func (m *NamespaceRequest) Reset()                    { *m = NamespaceRequest{} }
func (m *NamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*NamespaceRequest) ProtoMessage()               {}
func (*NamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NamespaceRequest) GetRequestId() *RequestId {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *NamespaceRequest) GetTypespace() string {
	if m != nil {
		return m.Typespace
	}
	return ""
}

type NumNamespacesResponse struct {
	Header        *Response `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NumNamespaces int64     `protobuf:"varint,2,opt,name=numNamespaces" json:"numNamespaces,omitempty"`
}

func (m *NumNamespacesResponse) Reset()                    { *m = NumNamespacesResponse{} }
func (m *NumNamespacesResponse) String() string            { return proto.CompactTextString(m) }
func (*NumNamespacesResponse) ProtoMessage()               {}
func (*NumNamespacesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NumNamespacesResponse) GetHeader() *Response {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NumNamespacesResponse) GetNumNamespaces() int64 {
	if m != nil {
		return m.NumNamespaces
	}
	return 0
}

type NamespaceTableResponse struct {
	Header     *Response `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Namespaces []string  `protobuf:"bytes,2,rep,name=namespaces" json:"namespaces,omitempty"`
}

func (m *NamespaceTableResponse) Reset()                    { *m = NamespaceTableResponse{} }
func (m *NamespaceTableResponse) String() string            { return proto.CompactTextString(m) }
func (*NamespaceTableResponse) ProtoMessage()               {}
func (*NamespaceTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NamespaceTableResponse) GetHeader() *Response {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NamespaceTableResponse) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

// Query Workspaces
type WorkspaceRequest struct {
	RequestId *RequestId `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	Typespace string     `protobuf:"bytes,2,opt,name=typespace" json:"typespace,omitempty"`
	Namespace string     `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *WorkspaceRequest) Reset()                    { *m = WorkspaceRequest{} }
func (m *WorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkspaceRequest) ProtoMessage()               {}
func (*WorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *WorkspaceRequest) GetRequestId() *RequestId {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *WorkspaceRequest) GetTypespace() string {
	if m != nil {
		return m.Typespace
	}
	return ""
}

func (m *WorkspaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type NumWorkspacesResponse struct {
	Header        *Response `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NumWorkspaces int64     `protobuf:"varint,2,opt,name=numWorkspaces" json:"numWorkspaces,omitempty"`
}

func (m *NumWorkspacesResponse) Reset()                    { *m = NumWorkspacesResponse{} }
func (m *NumWorkspacesResponse) String() string            { return proto.CompactTextString(m) }
func (*NumWorkspacesResponse) ProtoMessage()               {}
func (*NumWorkspacesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NumWorkspacesResponse) GetHeader() *Response {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NumWorkspacesResponse) GetNumWorkspaces() int64 {
	if m != nil {
		return m.NumWorkspaces
	}
	return 0
}

type WorkspaceTableResponse struct {
	Header     *Response                  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Workspaces map[string]*WorkspaceNonce `protobuf:"bytes,2,rep,name=workspaces" json:"workspaces,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WorkspaceTableResponse) Reset()                    { *m = WorkspaceTableResponse{} }
func (m *WorkspaceTableResponse) String() string            { return proto.CompactTextString(m) }
func (*WorkspaceTableResponse) ProtoMessage()               {}
func (*WorkspaceTableResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *WorkspaceTableResponse) GetHeader() *Response {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *WorkspaceTableResponse) GetWorkspaces() map[string]*WorkspaceNonce {
	if m != nil {
		return m.Workspaces
	}
	return nil
}

// Subscriptions
type WorkspaceUpdate struct {
	Name      string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RootId    *ObjectKey      `protobuf:"bytes,2,opt,name=rootId" json:"rootId,omitempty"`
	Nonce     *WorkspaceNonce `protobuf:"bytes,3,opt,name=nonce" json:"nonce,omitempty"`
	Immutable bool            `protobuf:"varint,4,opt,name=immutable" json:"immutable,omitempty"`
	Deleted   bool            `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *WorkspaceUpdate) Reset()                    { *m = WorkspaceUpdate{} }
func (m *WorkspaceUpdate) String() string            { return proto.CompactTextString(m) }
func (*WorkspaceUpdate) ProtoMessage()               {}
func (*WorkspaceUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *WorkspaceUpdate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkspaceUpdate) GetRootId() *ObjectKey {
	if m != nil {
		return m.RootId
	}
	return nil
}

func (m *WorkspaceUpdate) GetNonce() *WorkspaceNonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *WorkspaceUpdate) GetImmutable() bool {
	if m != nil {
		return m.Immutable
	}
	return false
}

func (m *WorkspaceUpdate) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

// Work with Workspaces
type BranchWorkspaceRequest struct {
	RequestId   *RequestId `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	Source      string     `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Destination string     `protobuf:"bytes,3,opt,name=destination" json:"destination,omitempty"`
}

func (m *BranchWorkspaceRequest) Reset()                    { *m = BranchWorkspaceRequest{} }
func (m *BranchWorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*BranchWorkspaceRequest) ProtoMessage()               {}
func (*BranchWorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BranchWorkspaceRequest) GetRequestId() *RequestId {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *BranchWorkspaceRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BranchWorkspaceRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type AdvanceWorkspaceRequest struct {
	RequestId     *RequestId      `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	WorkspaceName string          `protobuf:"bytes,2,opt,name=workspaceName" json:"workspaceName,omitempty"`
	Nonce         *WorkspaceNonce `protobuf:"bytes,3,opt,name=nonce" json:"nonce,omitempty"`
	CurrentRootId *ObjectKey      `protobuf:"bytes,4,opt,name=currentRootId" json:"currentRootId,omitempty"`
	NewRootId     *ObjectKey      `protobuf:"bytes,5,opt,name=newRootId" json:"newRootId,omitempty"`
}

func (m *AdvanceWorkspaceRequest) Reset()                    { *m = AdvanceWorkspaceRequest{} }
func (m *AdvanceWorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*AdvanceWorkspaceRequest) ProtoMessage()               {}
func (*AdvanceWorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AdvanceWorkspaceRequest) GetRequestId() *RequestId {
	if m != nil {
		return m.RequestId
	}
	return nil
}

func (m *AdvanceWorkspaceRequest) GetWorkspaceName() string {
	if m != nil {
		return m.WorkspaceName
	}
	return ""
}

func (m *AdvanceWorkspaceRequest) GetNonce() *WorkspaceNonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *AdvanceWorkspaceRequest) GetCurrentRootId() *ObjectKey {
	if m != nil {
		return m.CurrentRootId
	}
	return nil
}

func (m *AdvanceWorkspaceRequest) GetNewRootId() *ObjectKey {
	if m != nil {
		return m.NewRootId
	}
	return nil
}

type AdvanceWorkspaceResponse struct {
	Header *Response  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NewKey *ObjectKey `protobuf:"bytes,2,opt,name=newKey" json:"newKey,omitempty"`
}

func (m *AdvanceWorkspaceResponse) Reset()                    { *m = AdvanceWorkspaceResponse{} }
func (m *AdvanceWorkspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*AdvanceWorkspaceResponse) ProtoMessage()               {}
func (*AdvanceWorkspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AdvanceWorkspaceResponse) GetHeader() *Response {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdvanceWorkspaceResponse) GetNewKey() *ObjectKey {
	if m != nil {
		return m.NewKey
	}
	return nil
}

type FetchWorkspaceResponse struct {
	Header    *Response       `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Key       *ObjectKey      `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Nonce     *WorkspaceNonce `protobuf:"bytes,3,opt,name=nonce" json:"nonce,omitempty"`
	Immutable bool            `protobuf:"varint,4,opt,name=immutable" json:"immutable,omitempty"`
}

func (m *FetchWorkspaceResponse) Reset()                    { *m = FetchWorkspaceResponse{} }
func (m *FetchWorkspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchWorkspaceResponse) ProtoMessage()               {}
func (*FetchWorkspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FetchWorkspaceResponse) GetHeader() *Response {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FetchWorkspaceResponse) GetKey() *ObjectKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *FetchWorkspaceResponse) GetNonce() *WorkspaceNonce {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *FetchWorkspaceResponse) GetImmutable() bool {
	if m != nil {
		return m.Immutable
	}
	return false
}

func init() {
	proto.RegisterType((*WorkspaceNonce)(nil), "WorkspaceNonce")
	proto.RegisterType((*RequestId)(nil), "RequestId")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*ObjectKey)(nil), "ObjectKey")
	proto.RegisterType((*WorkspaceName)(nil), "WorkspaceName")
	proto.RegisterType((*Void)(nil), "Void")
	proto.RegisterType((*NumTypespacesResponse)(nil), "NumTypespacesResponse")
	proto.RegisterType((*TypespaceTableResponse)(nil), "TypespaceTableResponse")
	proto.RegisterType((*NamespaceRequest)(nil), "NamespaceRequest")
	proto.RegisterType((*NumNamespacesResponse)(nil), "NumNamespacesResponse")
	proto.RegisterType((*NamespaceTableResponse)(nil), "NamespaceTableResponse")
	proto.RegisterType((*WorkspaceRequest)(nil), "WorkspaceRequest")
	proto.RegisterType((*NumWorkspacesResponse)(nil), "NumWorkspacesResponse")
	proto.RegisterType((*WorkspaceTableResponse)(nil), "WorkspaceTableResponse")
	proto.RegisterType((*WorkspaceUpdate)(nil), "WorkspaceUpdate")
	proto.RegisterType((*BranchWorkspaceRequest)(nil), "BranchWorkspaceRequest")
	proto.RegisterType((*AdvanceWorkspaceRequest)(nil), "AdvanceWorkspaceRequest")
	proto.RegisterType((*AdvanceWorkspaceResponse)(nil), "AdvanceWorkspaceResponse")
	proto.RegisterType((*FetchWorkspaceResponse)(nil), "FetchWorkspaceResponse")
	proto.RegisterEnum("ResponseCodes", ResponseCodes_name, ResponseCodes_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkspaceDb service

type WorkspaceDbClient interface {
	NumTypespaces(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*NumTypespacesResponse, error)
	TypespaceTable(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*TypespaceTableResponse, error)
	NumNamespaces(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NumNamespacesResponse, error)
	NamespaceTable(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NamespaceTableResponse, error)
	NumWorkspaces(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*NumWorkspacesResponse, error)
	WorkspaceTable(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceTableResponse, error)
	SubscribeTo(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*Response, error)
	UnsubscribeFrom(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*Response, error)
	ListenForUpdates(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorkspaceDb_ListenForUpdatesClient, error)
	FetchWorkspace(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*FetchWorkspaceResponse, error)
	BranchWorkspace(ctx context.Context, in *BranchWorkspaceRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteWorkspace(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*Response, error)
	SetWorkspaceImmutable(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*Response, error)
	AdvanceWorkspace(ctx context.Context, in *AdvanceWorkspaceRequest, opts ...grpc.CallOption) (*AdvanceWorkspaceResponse, error)
}

type workspaceDbClient struct {
	cc *grpc.ClientConn
}

func NewWorkspaceDbClient(cc *grpc.ClientConn) WorkspaceDbClient {
	return &workspaceDbClient{cc}
}

func (c *workspaceDbClient) NumTypespaces(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*NumTypespacesResponse, error) {
	out := new(NumTypespacesResponse)
	err := grpc.Invoke(ctx, "/WorkspaceDb/NumTypespaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) TypespaceTable(ctx context.Context, in *RequestId, opts ...grpc.CallOption) (*TypespaceTableResponse, error) {
	out := new(TypespaceTableResponse)
	err := grpc.Invoke(ctx, "/WorkspaceDb/TypespaceTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) NumNamespaces(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NumNamespacesResponse, error) {
	out := new(NumNamespacesResponse)
	err := grpc.Invoke(ctx, "/WorkspaceDb/NumNamespaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) NamespaceTable(ctx context.Context, in *NamespaceRequest, opts ...grpc.CallOption) (*NamespaceTableResponse, error) {
	out := new(NamespaceTableResponse)
	err := grpc.Invoke(ctx, "/WorkspaceDb/NamespaceTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) NumWorkspaces(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*NumWorkspacesResponse, error) {
	out := new(NumWorkspacesResponse)
	err := grpc.Invoke(ctx, "/WorkspaceDb/NumWorkspaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) WorkspaceTable(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceTableResponse, error) {
	out := new(WorkspaceTableResponse)
	err := grpc.Invoke(ctx, "/WorkspaceDb/WorkspaceTable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) SubscribeTo(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/WorkspaceDb/SubscribeTo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) UnsubscribeFrom(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/WorkspaceDb/UnsubscribeFrom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) ListenForUpdates(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorkspaceDb_ListenForUpdatesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WorkspaceDb_serviceDesc.Streams[0], c.cc, "/WorkspaceDb/ListenForUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceDbListenForUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkspaceDb_ListenForUpdatesClient interface {
	Recv() (*WorkspaceUpdate, error)
	grpc.ClientStream
}

type workspaceDbListenForUpdatesClient struct {
	grpc.ClientStream
}

func (x *workspaceDbListenForUpdatesClient) Recv() (*WorkspaceUpdate, error) {
	m := new(WorkspaceUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceDbClient) FetchWorkspace(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*FetchWorkspaceResponse, error) {
	out := new(FetchWorkspaceResponse)
	err := grpc.Invoke(ctx, "/WorkspaceDb/FetchWorkspace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) BranchWorkspace(ctx context.Context, in *BranchWorkspaceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/WorkspaceDb/BranchWorkspace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) DeleteWorkspace(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/WorkspaceDb/DeleteWorkspace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) SetWorkspaceImmutable(ctx context.Context, in *WorkspaceName, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/WorkspaceDb/SetWorkspaceImmutable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceDbClient) AdvanceWorkspace(ctx context.Context, in *AdvanceWorkspaceRequest, opts ...grpc.CallOption) (*AdvanceWorkspaceResponse, error) {
	out := new(AdvanceWorkspaceResponse)
	err := grpc.Invoke(ctx, "/WorkspaceDb/AdvanceWorkspace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkspaceDb service

type WorkspaceDbServer interface {
	NumTypespaces(context.Context, *RequestId) (*NumTypespacesResponse, error)
	TypespaceTable(context.Context, *RequestId) (*TypespaceTableResponse, error)
	NumNamespaces(context.Context, *NamespaceRequest) (*NumNamespacesResponse, error)
	NamespaceTable(context.Context, *NamespaceRequest) (*NamespaceTableResponse, error)
	NumWorkspaces(context.Context, *WorkspaceRequest) (*NumWorkspacesResponse, error)
	WorkspaceTable(context.Context, *WorkspaceRequest) (*WorkspaceTableResponse, error)
	SubscribeTo(context.Context, *WorkspaceName) (*Response, error)
	UnsubscribeFrom(context.Context, *WorkspaceName) (*Response, error)
	ListenForUpdates(*Void, WorkspaceDb_ListenForUpdatesServer) error
	FetchWorkspace(context.Context, *WorkspaceName) (*FetchWorkspaceResponse, error)
	BranchWorkspace(context.Context, *BranchWorkspaceRequest) (*Response, error)
	DeleteWorkspace(context.Context, *WorkspaceName) (*Response, error)
	SetWorkspaceImmutable(context.Context, *WorkspaceName) (*Response, error)
	AdvanceWorkspace(context.Context, *AdvanceWorkspaceRequest) (*AdvanceWorkspaceResponse, error)
}

func RegisterWorkspaceDbServer(s *grpc.Server, srv WorkspaceDbServer) {
	s.RegisterService(&_WorkspaceDb_serviceDesc, srv)
}

func _WorkspaceDb_NumTypespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).NumTypespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/NumTypespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).NumTypespaces(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_TypespaceTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).TypespaceTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/TypespaceTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).TypespaceTable(ctx, req.(*RequestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_NumNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).NumNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/NumNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).NumNamespaces(ctx, req.(*NamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_NamespaceTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).NamespaceTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/NamespaceTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).NamespaceTable(ctx, req.(*NamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_NumWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).NumWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/NumWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).NumWorkspaces(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_WorkspaceTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).WorkspaceTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/WorkspaceTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).WorkspaceTable(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_SubscribeTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).SubscribeTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/SubscribeTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).SubscribeTo(ctx, req.(*WorkspaceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_UnsubscribeFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).UnsubscribeFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/UnsubscribeFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).UnsubscribeFrom(ctx, req.(*WorkspaceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_ListenForUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceDbServer).ListenForUpdates(m, &workspaceDbListenForUpdatesServer{stream})
}

type WorkspaceDb_ListenForUpdatesServer interface {
	Send(*WorkspaceUpdate) error
	grpc.ServerStream
}

type workspaceDbListenForUpdatesServer struct {
	grpc.ServerStream
}

func (x *workspaceDbListenForUpdatesServer) Send(m *WorkspaceUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkspaceDb_FetchWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).FetchWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/FetchWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).FetchWorkspace(ctx, req.(*WorkspaceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_BranchWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).BranchWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/BranchWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).BranchWorkspace(ctx, req.(*BranchWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/DeleteWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).DeleteWorkspace(ctx, req.(*WorkspaceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_SetWorkspaceImmutable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).SetWorkspaceImmutable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/SetWorkspaceImmutable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).SetWorkspaceImmutable(ctx, req.(*WorkspaceName))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkspaceDb_AdvanceWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdvanceWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceDbServer).AdvanceWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorkspaceDb/AdvanceWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceDbServer).AdvanceWorkspace(ctx, req.(*AdvanceWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkspaceDb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WorkspaceDb",
	HandlerType: (*WorkspaceDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NumTypespaces",
			Handler:    _WorkspaceDb_NumTypespaces_Handler,
		},
		{
			MethodName: "TypespaceTable",
			Handler:    _WorkspaceDb_TypespaceTable_Handler,
		},
		{
			MethodName: "NumNamespaces",
			Handler:    _WorkspaceDb_NumNamespaces_Handler,
		},
		{
			MethodName: "NamespaceTable",
			Handler:    _WorkspaceDb_NamespaceTable_Handler,
		},
		{
			MethodName: "NumWorkspaces",
			Handler:    _WorkspaceDb_NumWorkspaces_Handler,
		},
		{
			MethodName: "WorkspaceTable",
			Handler:    _WorkspaceDb_WorkspaceTable_Handler,
		},
		{
			MethodName: "SubscribeTo",
			Handler:    _WorkspaceDb_SubscribeTo_Handler,
		},
		{
			MethodName: "UnsubscribeFrom",
			Handler:    _WorkspaceDb_UnsubscribeFrom_Handler,
		},
		{
			MethodName: "FetchWorkspace",
			Handler:    _WorkspaceDb_FetchWorkspace_Handler,
		},
		{
			MethodName: "BranchWorkspace",
			Handler:    _WorkspaceDb_BranchWorkspace_Handler,
		},
		{
			MethodName: "DeleteWorkspace",
			Handler:    _WorkspaceDb_DeleteWorkspace_Handler,
		},
		{
			MethodName: "SetWorkspaceImmutable",
			Handler:    _WorkspaceDb_SetWorkspaceImmutable_Handler,
		},
		{
			MethodName: "AdvanceWorkspace",
			Handler:    _WorkspaceDb_AdvanceWorkspace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenForUpdates",
			Handler:       _WorkspaceDb_ListenForUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 965 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x8f, 0x22, 0x45,
	0x14, 0xa6, 0xb9, 0xed, 0xf4, 0x41, 0xa0, 0xf7, 0xb8, 0x0b, 0x88, 0x13, 0xc5, 0xca, 0xaa, 0x64,
	0x1f, 0xca, 0x0d, 0x6a, 0x34, 0x6a, 0x4c, 0x58, 0x2e, 0x66, 0x32, 0x23, 0x98, 0x02, 0x5c, 0xa3,
	0x0f, 0xd8, 0xd0, 0x95, 0x2c, 0xee, 0xd0, 0x8d, 0xd5, 0xcd, 0x8e, 0x24, 0xfb, 0x5b, 0x7c, 0xf6,
	0xc5, 0x7f, 0xe3, 0xcf, 0xf0, 0x47, 0x98, 0xae, 0x6e, 0xaa, 0xbb, 0xb9, 0x4c, 0xe6, 0xe2, 0x5b,
	0xd7, 0xb9, 0x7d, 0x55, 0x5f, 0x9d, 0xfa, 0x4e, 0x83, 0x2e, 0x56, 0x73, 0xba, 0x12, 0x8e, 0xe7,
	0x90, 0x8f, 0xa0, 0xf4, 0xc2, 0x11, 0xaf, 0xdc, 0x95, 0x39, 0xe7, 0x03, 0xc7, 0x9e, 0x73, 0x7c,
	0x04, 0x39, 0xdb, 0xff, 0xa8, 0x69, 0x0d, 0xad, 0x99, 0x67, 0xc1, 0x82, 0xbc, 0x0b, 0x3a, 0xe3,
	0xbf, 0xaf, 0xb9, 0xeb, 0x9d, 0x59, 0x58, 0x82, 0xf4, 0xc2, 0x92, 0xfe, 0x2c, 0x4b, 0x2f, 0x2c,
	0x22, 0xe0, 0x84, 0x71, 0x77, 0xe5, 0xd8, 0x2e, 0xc7, 0x26, 0xe8, 0x62, 0x1b, 0x28, 0x43, 0x0a,
	0x2d, 0xa0, 0x2a, 0x95, 0x45, 0x4e, 0x6c, 0x40, 0x86, 0x0b, 0x51, 0x4b, 0x37, 0xb4, 0x66, 0xa9,
	0x55, 0xa2, 0xdb, 0x0a, 0x1d, 0xc7, 0xe2, 0x2e, 0xf3, 0x5d, 0x58, 0x87, 0x13, 0x2e, 0x44, 0xc7,
	0x5c, 0xbb, 0xbc, 0x96, 0x69, 0x68, 0x4d, 0x9d, 0xa9, 0x35, 0x79, 0x1f, 0xf4, 0xe1, 0xec, 0x37,
	0x3e, 0xf7, 0xce, 0xf9, 0x06, 0x11, 0xb2, 0x96, 0xe9, 0x99, 0x12, 0xef, 0x2d, 0x26, 0xbf, 0xc9,
	0xf7, 0x50, 0x8c, 0x4e, 0x66, 0x2e, 0x6f, 0xb3, 0x33, 0x84, 0xac, 0x6d, 0x2e, 0xb9, 0xdc, 0x9a,
	0xce, 0xe4, 0x37, 0x39, 0x85, 0xec, 0x8f, 0xce, 0xc2, 0xf2, 0xe9, 0xb1, 0xd6, 0xcb, 0xe5, 0x46,
	0x56, 0x38, 0x61, 0xc1, 0x82, 0xfc, 0x0a, 0x8f, 0x07, 0xeb, 0xe5, 0x78, 0xb3, 0xe2, 0x12, 0xcf,
	0x55, 0x74, 0x7c, 0x00, 0xf9, 0x97, 0xdc, 0xb4, 0xb8, 0x08, 0x11, 0x75, 0x75, 0x4e, 0x16, 0x3a,
	0xf0, 0x09, 0x14, 0xed, 0x78, 0xae, 0x84, 0xcd, 0xb0, 0xa4, 0x91, 0xfc, 0x02, 0x15, 0xb5, 0x1a,
	0x9b, 0xb3, 0x4b, 0x7e, 0x1b, 0x88, 0xf7, 0x00, 0xbc, 0x78, 0xfd, 0x4c, 0x53, 0x67, 0x31, 0x0b,
	0xf9, 0x19, 0x0c, 0x9f, 0x22, 0xb9, 0x0a, 0x19, 0xb9, 0x05, 0x5d, 0xa7, 0xa0, 0xab, 0x5a, 0x21,
	0x67, 0x91, 0x21, 0xa4, 0x46, 0x95, 0xbf, 0x03, 0x35, 0x51, 0x6e, 0x8c, 0x9a, 0xc8, 0xe8, 0x53,
	0xa3, 0x56, 0x77, 0xa1, 0xc6, 0x8e, 0xd7, 0x97, 0xd4, 0x44, 0x16, 0xf2, 0x07, 0x18, 0xaa, 0x8d,
	0xfe, 0x67, 0x6a, 0x7c, 0xaf, 0x42, 0x0a, 0x1b, 0x3c, 0x32, 0x84, 0xc4, 0x29, 0xf0, 0x3b, 0x10,
	0x17, 0xe5, 0xc6, 0x88, 0x8b, 0x8c, 0xe4, 0x1f, 0x0d, 0x2a, 0x6a, 0x79, 0x6b, 0xe6, 0xbe, 0x03,
	0xb8, 0x8a, 0x03, 0x64, 0x9a, 0x85, 0xd6, 0xc7, 0xf4, 0x70, 0xbd, 0xc8, 0xec, 0xf6, 0x6c, 0x4f,
	0x6c, 0x58, 0x2c, 0xb5, 0x3e, 0x80, 0xf2, 0x8e, 0x1b, 0x0d, 0xc8, 0xbc, 0xe2, 0xc1, 0x1b, 0xd3,
	0x99, 0xff, 0x89, 0x1f, 0x42, 0xee, 0xb5, 0x79, 0xb9, 0x0e, 0x58, 0x2c, 0xb4, 0xca, 0x34, 0x29,
	0x5b, 0x2c, 0xf0, 0x7e, 0x95, 0xfe, 0x52, 0x23, 0x7f, 0x69, 0xb1, 0x82, 0x93, 0x95, 0x65, 0x7a,
	0x5c, 0x3d, 0x69, 0x2d, 0x7a, 0xd2, 0x48, 0x20, 0x2f, 0x1c, 0xc7, 0xbf, 0xc3, 0x74, 0x78, 0x87,
	0x4a, 0x51, 0x58, 0xe8, 0xf1, 0x61, 0x03, 0x35, 0xcc, 0x1c, 0x81, 0x95, 0x5e, 0xff, 0x26, 0x17,
	0xcb, 0xe5, 0xda, 0xf3, 0xcf, 0x5c, 0xcb, 0x4a, 0x65, 0x88, 0x0c, 0x58, 0x83, 0x07, 0x16, 0xbf,
	0xe4, 0x1e, 0xb7, 0x6a, 0x39, 0xe9, 0xdb, 0x2e, 0xc9, 0x1b, 0xa8, 0x3c, 0x17, 0xa6, 0x3d, 0x7f,
	0x79, 0x8f, 0x1e, 0xab, 0x40, 0xde, 0x75, 0xd6, 0x42, 0x35, 0x58, 0xb8, 0xc2, 0x06, 0x14, 0x2c,
	0xee, 0x7a, 0x0b, 0xdb, 0xf4, 0x16, 0x8e, 0x1d, 0xf6, 0x57, 0xdc, 0x44, 0xfe, 0xd5, 0xa0, 0xda,
	0xb6, 0x5e, 0x9b, 0xf6, 0x9c, 0xdf, 0x03, 0xff, 0x09, 0x14, 0xaf, 0xe2, 0x42, 0x1b, 0x6e, 0x23,
	0x69, 0xbc, 0x29, 0x91, 0xcf, 0xa0, 0x38, 0x5f, 0x0b, 0xc1, 0x6d, 0x8f, 0x05, 0x57, 0x93, 0xdd,
	0xbb, 0x9a, 0x64, 0x80, 0xbf, 0x51, 0x9b, 0x5f, 0x85, 0xd1, 0xb9, 0xbd, 0xe8, 0xc8, 0x49, 0x4c,
	0xa8, 0xed, 0x9f, 0xf6, 0xe6, 0xfd, 0x4e, 0x20, 0x6f, 0xf3, 0xab, 0x73, 0xbe, 0x39, 0xd4, 0x2e,
	0x81, 0x87, 0xfc, 0xa9, 0x41, 0xa5, 0xcf, 0xbd, 0xc4, 0x7d, 0xde, 0x1c, 0xe1, 0x34, 0xe8, 0xfa,
	0xfd, 0xf2, 0xdb, 0x17, 0x70, 0xef, 0x56, 0x7c, 0xfa, 0x06, 0x8a, 0x89, 0x41, 0x8b, 0x05, 0x78,
	0x30, 0x9a, 0x74, 0x3a, 0xbd, 0xd1, 0xc8, 0x48, 0x61, 0x15, 0xde, 0x7e, 0x31, 0x64, 0xe7, 0xa3,
	0x1f, 0xda, 0x9d, 0xde, 0x74, 0x30, 0x1c, 0x4f, 0xfb, 0xc3, 0xc9, 0xa0, 0x6b, 0x68, 0xf8, 0x08,
	0x8c, 0xc8, 0xd1, 0xfb, 0xe9, 0x6c, 0x34, 0x1e, 0x19, 0x69, 0x44, 0x28, 0xf5, 0xdb, 0xe3, 0xf6,
	0xc5, 0xb4, 0xfb, 0x7c, 0xda, 0x63, 0x6c, 0xc8, 0x8c, 0x0c, 0x02, 0xe4, 0x2f, 0x86, 0x9d, 0xf3,
	0x5e, 0xd7, 0xc8, 0x62, 0x19, 0x0a, 0xc3, 0xc9, 0x78, 0x3a, 0xec, 0x4f, 0xbb, 0xed, 0x71, 0xcf,
	0xc8, 0xb5, 0xfe, 0xce, 0x43, 0x41, 0xed, 0xba, 0x3b, 0xc3, 0xcf, 0xa1, 0x98, 0x18, 0x9b, 0x18,
	0x6b, 0xb1, 0x7a, 0x85, 0x1e, 0x1c, 0xa9, 0x24, 0x85, 0x5f, 0x40, 0x29, 0x39, 0x0b, 0x13, 0x79,
	0x55, 0x7a, 0x78, 0x50, 0x92, 0x14, 0x7e, 0x23, 0xf1, 0xa2, 0xd1, 0x81, 0x0f, 0xe9, 0xee, 0xdc,
	0x0b, 0x60, 0xf7, 0xc7, 0x15, 0x49, 0xe1, 0xb7, 0x50, 0x4a, 0xce, 0x99, 0x43, 0xe9, 0x55, 0x7a,
	0x78, 0x16, 0x29, 0xf4, 0x48, 0xea, 0xf0, 0x21, 0xdd, 0x7d, 0x76, 0x01, 0xfa, 0xbe, 0xe6, 0x07,
	0xe8, 0x49, 0x6d, 0x3d, 0x94, 0x5e, 0x3d, 0xa2, 0xbf, 0x24, 0x85, 0x4f, 0xa1, 0x30, 0x5a, 0xcf,
	0xdc, 0xb9, 0x58, 0xcc, 0xf8, 0xd8, 0xc1, 0x12, 0x4d, 0xfc, 0x1d, 0xd5, 0xa3, 0x76, 0x24, 0x29,
	0xa4, 0x50, 0x9e, 0xd8, 0xee, 0x36, 0xba, 0x2f, 0x9c, 0xe5, 0xf5, 0xf1, 0x9f, 0x80, 0x71, 0xb1,
	0x70, 0x3d, 0x6e, 0xf7, 0x1d, 0x11, 0x08, 0xae, 0x8b, 0x39, 0xea, 0xff, 0x2f, 0xd5, 0x0d, 0xba,
	0x23, 0xc5, 0x24, 0xf5, 0x4c, 0xc3, 0xaf, 0xa1, 0x94, 0x7c, 0x26, 0x7b, 0xf5, 0xab, 0xf4, 0xf0,
	0x3b, 0x92, 0xd7, 0x5f, 0xde, 0x11, 0x4d, 0xac, 0xd2, 0xc3, 0x32, 0xba, 0x77, 0xac, 0xae, 0x14,
	0xde, 0xe3, 0xb0, 0x89, 0xf8, 0xcf, 0xe0, 0xf1, 0x88, 0x7b, 0x2a, 0xe0, 0x4c, 0x09, 0xfa, 0xb5,
	0x59, 0x67, 0x60, 0xec, 0xca, 0x0c, 0xd6, 0xe8, 0x11, 0x9d, 0xad, 0xbf, 0x43, 0x8f, 0x69, 0x12,
	0x49, 0xcd, 0xf2, 0xf2, 0x27, 0xfd, 0xd3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x93, 0x9b,
	0x91, 0xb1, 0x0b, 0x00, 0x00,
}
