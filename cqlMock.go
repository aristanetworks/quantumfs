// Copyright (c) 2016 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.
// Do not modify this file. To be generated only using mockery

package cql

import mock "github.com/stretchr/testify/mock"

// MockCluster is an autogenerated mock type for the Cluster type
type MockCluster struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields:
func (_m *MockCluster) CreateSession() (Session, error) {
	ret := _m.Called()

	var r0 Session
	if rf, ok := ret.Get(0).(func() Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ Cluster = (*MockCluster)(nil)

// MockSession is an autogenerated mock type for the Session type
type MockSession struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockSession) Close() {
	_m.Called()
}

// Closed provides a mock function with given fields:
func (_m *MockSession) Closed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Query provides a mock function with given fields: stmt, values
func (_m *MockSession) Query(stmt string, values ...interface{}) Query {
	ret := _m.Called(stmt, values)

	var r0 Query
	if rf, ok := ret.Get(0).(func(string, ...interface{}) Query); ok {
		r0 = rf(stmt, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Query)
		}
	}

	return r0
}

var _ Session = (*MockSession)(nil)

// MockQuery is an autogenerated mock type for the Query type
type MockQuery struct {
	mock.Mock
}

// Exec provides a mock function with given fields:
func (_m *MockQuery) Exec() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Iter provides a mock function with given fields:
func (_m *MockQuery) Iter() Iter {
	ret := _m.Called()

	var r0 Iter
	if rf, ok := ret.Get(0).(func() Iter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Iter)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: dest
func (_m *MockQuery) Scan(dest ...interface{}) error {
	ret := _m.Called(dest)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *MockQuery) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

var _ Query = (*MockQuery)(nil)

// MockIter is an autogenerated mock type for the Iter type
type MockIter struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockIter) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomPayload provides a mock function with given fields:
func (_m *MockIter) GetCustomPayload() map[string][]byte {
	ret := _m.Called()

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func() map[string][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	return r0
}

// MapScan provides a mock function with given fields: m
func (_m *MockIter) MapScan(m map[string]interface{}) bool {
	ret := _m.Called(m)

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[string]interface{}) bool); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NumRows provides a mock function with given fields:
func (_m *MockIter) NumRows() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PageState provides a mock function with given fields:
func (_m *MockIter) PageState() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: dest
func (_m *MockIter) Scan(dest ...interface{}) bool {
	ret := _m.Called(dest)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...interface{}) bool); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SliceMap provides a mock function with given fields:
func (_m *MockIter) SliceMap() ([]map[string]interface{}, error) {
	ret := _m.Called()

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func() []map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WillSwitchPage provides a mock function with given fields:
func (_m *MockIter) WillSwitchPage() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

var _ Iter = (*MockIter)(nil)
