// Copyright (c) 2017 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

syntax = "proto3";

// This is essentially a thin wrapper around quantumfs.WorkspaceDB
service WorkspaceDb {
	rpc NumTypespaces(RequestId) returns (NumTypespacesResponse) {}
	rpc TypespaceTable(RequestId) returns (TypespaceTableResponse) {}
	rpc NumNamespaces(NumNamespacesRequest) returns (NumNamespacesResponse) {}
	rpc NamespaceTable(NamespaceTableRequest) returns (NamespaceTableResponse) {}
	rpc NumWorkspaces(NumWorkspacesRequest) returns (NumWorkspacesResponse) {}
	rpc WorkspaceTable(WorkspaceTableRequest) returns (WorkspaceTableResponse) {}

	rpc SubscribeTo(WorkspaceName) returns (Response) {}
	rpc UnsubscribeFrom(WorkspaceName) returns (Response) {}
	rpc ListenForUpdates(Void) returns (stream WorkspaceUpdate) {}

	rpc FetchWorkspace(WorkspaceName) returns (FetchWorkspaceResponse) {}

	rpc BranchWorkspace(BranchWorkspaceRequest) returns (Response) {}
	rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (Response) {}
	rpc SetWorkspaceImmutable(WorkspaceName) returns (Response) {}
	rpc AdvanceWorkspace(AdvanceWorkspaceRequest) returns (AdvanceWorkspaceResponse) {}
}

message RequestId {
	int64 id = 1;
}

message Request {
	RequestId requestId = 1;
}

enum ResponseCodes {
	SUCCESS = 0;
	WORKSPACE_NOT_FOUND = 1;
	WORKSPACE_EXISTS = 2;
	FATAL_DB_ERROR = 3;
	LOCKED = 4;
	OUT_OF_DATE = 5;
}

message Response {
	RequestId requestId = 1;
	ResponseCodes err = 2;
}

message ObjectKey {
	bytes data = 1;
}

message WorkspaceName {
	string name = 1;
}

message Void {
	bool dummy = 1;
}

// Query Typespaces
message NumTypespacesResponse {
	Response header = 1;
	int64 numTypespaces = 2;
}

message TypespaceTableResponse {
	Response header = 1;
	repeated string typespaces = 2;
}

// Query Namespaces
message NumNamespacesRequest {
	Request header = 1;
	string typespace = 2;
}

message NumNamespacesResponse {
	Response header = 1;
	int64 numNamespaces = 2;
}

message NamespaceTableRequest {
	Request header = 1;
	string typespace = 2;
}

message NamespaceTableResponse {
	Response header = 1;
	repeated string namespaces = 2;
}

// Query Workspaces
message NumWorkspacesRequest {
	Request header = 1;
	string typespace = 2;
	string namespace = 3;
}

message NumWorkspacesResponse {
	Response header = 1;
	int64 numWorkspaces = 2;
}

message WorkspaceTableRequest {
	Request header = 1;
	string typespace = 2;
	string namespace = 3;
}

message WorkspaceTableResponse {
	Response header = 1;
	repeated string workspaces = 2;
}

// Subscriptions
message SubscribeTo {
	string workspaceName = 1;
}

message UnsubscribeFrom {
	string workspaceName = 1;
}

message WorkspaceUpdate {
	ObjectKey rootId = 1;
	fixed64 nonce = 2;
	bool immutable = 3;
	bool deleted = 4;
}

// Work with Workspaces
message BranchWorkspaceRequest {
	Request header = 1;
	string source = 2; // Workspace name, ie. build/eos-trunk/latestPass
	string destination = 3; // Workspace name
}

message BranchWorkspaceResponse {
	Response header = 1;
}

message DeleteWorkspaceRequest {
	Request header = 1;
	string workspaceName = 2;
}

message DeleteWorkspaceResponse {
	Response header = 1;
}

message SetWorkspaceImmutableRequest {
	Request header = 1;
	string workspaceName = 2;
}

message SetWorkspaceImmutableResponse {
	Response header = 1;
}

// No WorkspaceIsImmutable, use FetchWorkspace instead.

message AdvanceWorkspaceRequest {
	Request header = 1;
	string workspaceName = 2;
	fixed64 nonce = 3;
	ObjectKey currentRootId = 4;
	ObjectKey newRootId = 5;
}

message AdvanceWorkspaceResponse {
	Response header = 1;
	ObjectKey newKey = 2;
}

message FetchWorkspaceRequest {
	Request header = 1;
	string workspaceName = 2;
}

message FetchWorkspaceResponse {
	Response header = 1;
	ObjectKey key = 2;
	fixed64 nonce = 3;
	bool immutable = 4;
}
