Coding Style
############

The coding style used in QuantumFS with golang is defined by these simple rules:

1. Use go fmt
2. Tabs are eight spaces
3. The maximum line length is 85 characters
4. When wrapping indent with one tab. If the following code would be at the same
   level insert a blank line.

These simple rules can be challenging to implement and appease go fmt at the same
time. Here are examples of mutually acceptable formatting in some of these
challenging cases. For the purposes of discussion all the examples below will assume
a maximum line length of 60.

Enums
=====

All enums in quantumfs package, but not necessarily the other packages such as
quantumfs/daemon, must use explicit numbers instead of iota directive.
This simplifies spotting mismatches in exported constant values across API implementations
in different programming languages.

When using a set of constants to represent an enum type, make sure to have the first
constant represent an invalid value. For example -

const (
	KeyTypeInvalid   = 0 // Invalid
	KeyTypeConstant  = 1 // A statically known object, such as the empty block
	KeyTypeOther     = 2 // A nonspecific type
  ...
)

When error codes/enums are exchanged with clients in different programming
language, use first enum with value 0 to represent success. For example -

const (
	ErrorOK                = 0 // Command Successful
	ErrorBadArgs           = 1 // The argument is wrong
  ...
)

In Go, success is represented using nil error. When the error codes/enums are used
only in the Go code, then reserve the first enum with value 0. This ensures that
constants representing error conditions can match to error codes in other programming
languages where 0 is treated as success. For example -

const (
	WSDB_RESERVED            WsdbErrCode = 0
	WSDB_WORKSPACE_NOT_FOUND             = 1 // The workspace didn't exist
	WSDB_WORKSPACE_EXISTS                = 2 // The workspace already exists
  ...
)

maps cleanly to following C++ enum

enum WsdbErrorCode {
	// Success
	kSuccess = 0,
	kWorkspaceNotFound = 1,
  ...
};

Long Function Signature
=======================

If you have a long function signature, you must wrap after a comma. Because indenting
one level will put the continuation of the signature at the same level as the code,
insert a blank line after the wrapped function signature. ie.

  0         1         2         3         4         5         *         7         8
  01234567890123456789012345678901234567890123456789012345678901234567890123456789012
> func (fi *File) OpenDir(c *ctx, context fuse.Context, flags uint32) fuse.Status {
>       var foo int

would be wrapped

  0         1         2         3         4         5         *         7         8
  01234567890123456789012345678901234567890123456789012345678901234567890123456789012
> func (fi *File) OpenDir(c *ctx, context fuse.Context,
>         flags uint32) fuse.Status {
> 
>         var foo int

Note the blank line following the function signature.

Unfortunately go fmt demands wrapping a functions signature after a comma. Wrapping
between the argument list and the return list is not allowed. Thus you must wrap the
last argument as well:

  0         1         2         3         4         5         *         7         8
  01234567890123456789012345678901234567890123456789012345678901234567890123456789012
> func (fi *File) OpenDir(c *ctx, context fuse.Context) fuse.Status {
>       var foo int

Needs to be wrapped like so:

  0         1         2         3         4         5         *         7         8
  01234567890123456789012345678901234567890123456789012345678901234567890123456789012
> func (fi *File) OpenDir(c *ctx,
>       context fuse.Context) fuse.Status {
> 
>       var foo int


If-Statements
=============

Wrapping long if-statements is also somewhat challenging due to the automatic
semicolon insertion rule, especially if the idiomatic "if err := somecall(); err !=
nil {" style is used. Although ugly options appear to be restricted to using the less
idomatic form:

> err := somecall()
> if err != nil {

or wrapping the line in the argument list for somecall(). For the same reasons as
with long functions signatures a blank line is necessary. ie:

  0         1         2         3         4         5         *         7         8
  01234567890123456789012345678901234567890123456789012345678901234567890123456789012
>        if err := c.workspaceDB.BranchWorkspace(src, dst); err != nil {
>                api = 6

must be wrapped like:

  0         1         2         3         4         5         *         7         8
  01234567890123456789012345678901234567890123456789012345678901234567890123456789012
>        if err := c.workspaceDB.BranchWorkspace(src,
>                dst); err != nil {
> 
>                api = 6

Naming Conventions
##################

Test filenames
==============

Test filenames start with a capital letter and end with "_test".

Function Names
==============

Function names follow the golang style. An important extension of this is that
functions which expect a particular lock to already be held by the caller will have
an underscore ("_") appended to the function name. There must also be a comment for
the function describing the minimum lock(s) which must be held.

Locking and Critical Sections
#############################

Use utils.DeferableMutex and utils.DeferableRwMutex as in:

> func (obj *Obj a() {
>       obj.doSomethingExpensive1()
>
>       func() {
>               defer obj.mutex.Lock().Unlock()
>               obj.doSomethingImportant()
>       }()
>
>       obj.doSomethingExpensive2()
> }

See LOCKING for an explanation as well as a description of the locking rules.
